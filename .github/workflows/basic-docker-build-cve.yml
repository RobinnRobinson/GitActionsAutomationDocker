name: 1 Basic Docker Build

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

jobs:
  build-image:
    name: Build Images
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write # needed to create and update comments in PRs

    steps:

      # Set up QEMU is a command used to set up QEMU, which is a generic and open source machine emulator and virtualizer.
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
          
      # Set up Docker Buildx is a command used to set up Docker Buildx, which is a Docker CLI plugin for extended build capabilities with BuildKit.  
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      #Docker build is a command used to create a Docker image from a Dockerfile and a context.
      - name: Build and Export to Docker
        uses: docker/build-push-action@v6
        with:
          push: false
          load: true # Export to Docker Engine rather than pushing to a registry
          tags: ${{ github.run_id }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/arm64
          # this is a list of platforms that QEMU will be set up for.

      # Use Trivy to scan the image for vulnerabilities
      # Trivy is a simple and comprehensive vulnerability scanner for containers and other artifacts.
      # It detects vulnerabilities in OS packages and application dependencies.
      - name: Run Trivy for all CVEs (non-blocking)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ github.run_id }}
          # using github.run_id as it's unique id for each run and it's shorter than full sha
          exit-code: 0
          # exit-code: 0 means it will not fail the build if vulnerabilities are found
          format: table
          # format: table means it will output the results in a table format

      # Docker meta is a command used to generate metadata for Docker images, including tags and labels.
      # It uses the docker/metadata-action@v5 action to create metadata based on the provided configuration.
      - name: Docker Metadata for Final Image Build
        id: docker_meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/robinrobinson824
          flavor: |
            latest=false
          tags: |
            type=raw,value=06
          # comment these out on all but 04-add-metadata.yaml to avoid overwriting image tags
          # type=raw,value=latest,enable=${{ endsWith(github.ref, github.event.repository.default_branch) }}
          # type=ref,event=pr
          # type=ref,event=branch
          # type=semver,pattern={{version}}
      
      # If PR, put image tags in the PR comments
      # from https://github.com/marketplace/actions/create-or-update-comment
      - name: Find comment for image tags
        uses: peter-evans/find-comment@v3
        if: github.event_name == 'pull_request'
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: Docker image tag(s) pushed
      
      # If PR, put image tags in the PR comments
      - name: Create or update comment for image tags
        uses: peter-evans/create-or-update-comment@v4
        if: github.event_name == 'pull_request'
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            Docker image tag(s) pushed:
            ```text
            ${{ steps.docker_meta.outputs.tags }}
            ```

            Labels added to images:
            ```text
            ${{ steps.docker_meta.outputs.labels }}
            ```
          edit-mode: replace

      # Docker Build and Push to Docker Hub
      - name: Docker Build and Push to Docker Hub
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64, linux/arm64, linux/arm/v7